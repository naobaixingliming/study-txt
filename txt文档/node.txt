

项目初始化 npm init
安装 [] 并将其保存到依赖列表中

安装模块：  cnpm install express  --save
			cnpm install body-parser --save  解析post请求数据     
			cnpm install cookies --save		 读写cookies
			cnpm install swig --save		 模板解析引擎	
			cnpm install mongoose --save	 操作mongodb数据
			cnpm install markdown --save	 解析生成模块				

blog 目录
	db :          数据库存储目录
	models:		  数据库模型文件目录
	mode_modules  node第三方模块目录
	public		  公共文件目录
	routers       路由文件目录
	schemas       数据库结构文件目录
	views         模板视图文件目录
	app.js        应用（启动）入口文件
	
	
	用户发送http请求	--->	url   --->后端： 解析路由  --->		找到匹配的规则   --->	执行指定的绑定函数，返回对应内容至用户
	/public --> 静态 --> 直接读取指定目录下大的文件返回给用户    
	动态    --> 处理义务逻辑、加载模块、解析模块 --> 返回数据给用户

应用创建	
.创建应用、监听端口
	var express=require('express');
	var app=express();
	app.listen(8081);
	
.用户的访问

处理请求输出
.路由绑定
	通过app.get()或app.post（）等方法可以把一个URL路径和一个或N个函数进行绑定
		req:保存客户端的一些数据
		res:服务端发送的数据
		next:
.内容输出
		通过res.send(string)发送内容至客户端

使用模板
	.模板的使用
		后端逻辑和页面表现分离
	.模板配置
		var swig=require('swig');
		app.engine('html',swig.renderFile);
		//设置模板的存放目录，@pram1:必须是views  @pram2:存放目录
		app.set('views','./views');
		//注册所使用的模板引擎，@parm1:必须是view engine，@pram2:和app.engine定义的模板引擎名称一致；
		app.set('view engine','html');
		
		
		//读取views目录下的指定文件，解析并返回给客户端;
		//@pram1:表示模板文件：相对于views目录 views/index.html
		//@pram2:传递给模板使用的数据		
		res.render('index');
		
		//设置取消模板缓存文件
		swig.setDefaults({cache:false});

		//设置静态文件托管	
		app.use('/static',express.static(__dirname+'/public'));

模块划分
	.根据功能进行模块划分
		前台模块
		后台管理模块
		API模块
	app.use()进行模块划分
		app.use('/admin',require('./router/admin'));

	
前台路由+模板
	.main模块
		/		首页
		/view	内容页
	
	.api模块
		/				首页
		/register		用户注册
		/login			用户登录
		/comment		评论获取
		/comment/post	评论提交
	
后台路由+模板
		/				首页
	用户管理
		/user			用户列表
	分类管理
		/category		分类列表
		/category/add	分类添加
		/category/edit	分类修改
		/category/delete分类删除
	文章内容管理
		/article		内容列表
		/article/add	内容添加
		/article/edit	内容修改
		/article/delete	内容删除
	评论内容管理
		/comment		评论列表
		/comment/delete 评论删除
	
用户注册
	.UserSchema结构设计
		定义数据结构
	.注册界面
	
	.注册逻辑
		使用ajax方式实现注册
		api接口编写
	
	
	
	
	
	
数据库的使用	
mongodb数据库
	.开启： mongodb\bin下执行  mongod --dbpath=[db所在路径] --port=[28017端口号]
	.数据保存
		使用mongoose操作数据库
		http://mongoosejs.com
	.创建model
		通过Schema创建模型类
		mongoose.model('模型类名称',Schema);
	
body-parser的使用
	.解析前端发送的数据	
	app.use(bodyParser.urlencoded({extended:true})) ---> req.body：获取到前端提交的数据
	
cookies的使用
	app.use(function(req，res，next){
		
	})	
	//发送一个cookies信息给浏览器保存 --> 头部信息发送给服务端
	req.cookies.set('c_userInfo',JSON.stringify());
	
	req.userInfo=JSON.parse(req.cookies.get('c_userInfo'));
	.数据给模板使用  render(pram1,{'key':req.userInfo});
	
	



用户管理
		.从数据库中读取所有用户信息
		find() limit（） skip(n):忽略前n条数据,从第N条开始读
	

分类修改
	.获取要修改的分类信息，并且用表单的形式展示出来
	.获取要修改的分类信息


	
	
	
	
	
	
	
	
	